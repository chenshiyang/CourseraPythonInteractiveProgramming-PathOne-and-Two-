Question 1
The class code provided for this week's mini-project supports an ImageInfo 
class to organize the data associated with the image. Consider an ImageInfo 
object of the following form:

ImageInfo([45, 45], [90, 90], 35)

What is the radius of the shape associated with this ImageInfo object?

Answer: 35

Question 2
Consider the provided ImageInfo and Sprite class code. Assume 
we want ten asteroids on the screen, each looking exactly alike 
and using the same image file. How many ImageInfo objects and how 
many Sprite objects should we create?

Answer: one ImageInfo object, ten Sprite objects

Question 3
The version of Rice Rocks that we will implement uses only a single 
asteroid image and spawns multiple instances of the provided Sprite 
class using this image. In the original Asteroids, a large asteroid 
split into two medium asteroids which themselves split into two small asteroids.

If we only had one image and wanted to implement asteroids of 
varying sizes in our version, how should we do this?

Answer: Add a size attribute in the Sprite class and a size parameter to Sprite.__init__. Use the size attribute when drawing the sprite.

Question 4
What is the supported range of sound volumes in set_volume? You can find out in the CodeSkulptor documentation.
Answer : 0 to 1.

Question 5
Assume you have code that loads and plays a sound. Unfortunately, 
you don't hear anything. Which of the following could be a reason?

Answer:
Your browser is loading a big sound file. Wait longer.

The given URL exists, but is inaccessible due to network problems.

You have set the volume level to 0.

No file is found with the given URL.

A file found with the given URL isn't a sound file recognized by your browser.

Question 6
Which of the following are valid HTML representations of the color blue?
Answer:
"Blue"
"#0000FF"
"rgb(0, 0, 255)"


Question 7
Imagine we are writing code for something like Rice Rocks, where things are moving in 2D toroidal space, i.e., the wrap around all four sides of the screen. How can we eliminate the duplicated code in the following function?

def move(position, vector):
    """Moves the position by the given vector in 2D toroidal space."""
    position[0] = (position[0] + vector[0]) % SCREEN_SIZE[0]
    position[1] = (position[1] + vector[1]) % SCREEN_SIZE[1]
    
Answer:
def move_dimension(dimension, position, vector):
    """Moves the position component by the given vector component in 1D toroidal space."""
    position[dimension] = (position[dimension] + vector[dimension]) % SCREEN_SIZE[dimension]

def move(position, vector):
    """Moves the position by the given vector in 2D toroidal space."""
    move_dimension(0, position, vector)
    move_dimension(1, position, vector)
    
    
NUM_DIMENSIONS = 2
def move(position, vector):
    """Moves the position by the given vector in 2D toroidal space."""
    for d in range(NUM_DIMENSIONS):
        position[d] = (position[d] + vector[d]) % SCREEN_SIZE[d]
        
        
Question 8
What is the primary reason for not duplicating code? It was the only reason mentioned in the Programming Tips #7 video.

Answer: You only need to get the code correct once.

Question 9
What is Mike Massimino's greatest accomplishment?
Answer: Fixing the Hubble Space Telescope in space.